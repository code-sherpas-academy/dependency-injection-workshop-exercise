# Dependency Injection Exercise

## Phase 1: Pure Dependency Injection

Fork this repository: https://github.com/code-sherpas-academy/dependency-injection-workshop-exercise.git

The repository contains a three-layer application that sends SMS to contacts from a contact list. Run it in order to have a feel of how it works, and get familiar with the code.

The initial app does not use Dependency Injection: each class creates its own dependencies.

We have the following challenges:
1. The app prepends to each SMS an emoji depicting the current season. How can we test this behaviour for the four seasons, if tests run only on a specific date?
2. We want users to be able to swap the SMS service by specifying the desired one in a configuration file. (Code for reading it is already written in the dependencies package)

TASK:
Redesign the app using Pure Dependency Injection and solve the previous challenges.
Use the main function as Composition Root.

## Phase 2: Autowiring

Create a new branch from the previous solution.

There is a new requirement: whenever an SMS is sent we also want an email to be sent to the contact.
We need to add a new service in the SendMessage use case.

TASK:

1. Implement the new requirement.
2. Consider:
    i. At how many sites in the code must we make changes?
    ii. How could we reduce the number of changes? Is this related to the hard-coded object graph?
    iii. What would the Composition Root look like if the app had hundreds of classes?
3. Refactor the app implementing a Container that can autowire dependencies. Research on how you can use reflection in your language of choice. Dependencies must be explicitly registered into the Container.

## Phase 3: Auto-Registration

Create a new branch from the previous solution.

Suppose our application has grown a lot and there are a lot of registered services.
The Composition Root is hard to maintain and we don't want it to keep growing.
But there is a new requirement: whenever a message is sent, a letter should be printed and delivered to the contact.
We need to add a new service in the SendMessage use case.

TASK:

1. Refactor the app so that the new service can be auto-registered without registering it in the Composition Root.
2. Apply the same pattern to existing dependencies, removing all registrations from the Composition Root.

You are free to choose an auto-registration convention: define an annotation, a naming convention, etc.